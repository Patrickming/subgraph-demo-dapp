/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  GravatarRegistry,
  GravatarRegistryInterface,
} from "../GravatarRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "displayName",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "imageUrl",
        type: "string",
      },
    ],
    name: "NewGravatar",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "displayName",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "imageUrl",
        type: "string",
      },
    ],
    name: "UpdatedGravatar",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_displayName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_imageUrl",
        type: "string",
      },
    ],
    name: "createGravatar",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "getGravatar",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "gravatarToOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "gravatars",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "string",
        name: "displayName",
        type: "string",
      },
      {
        internalType: "string",
        name: "imageUrl",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "ownerToGravatar",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "setMythicalGravatar",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_imageUrl",
        type: "string",
      },
    ],
    name: "updateGravatarImage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_displayName",
        type: "string",
      },
    ],
    name: "updateGravatarName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d8d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c8063a5ac36341161005b578063a5ac363414610114578063b18588fb14610142578063cdb3344a14610155578063d5ce24ed1461016857600080fd5b806281d6e51461008c5780631d4f2c6d146100a1578063359c1f72146100a957806388d0d391146100d3575b600080fd5b61009f61009a366004610a14565b61018a565b005b61009f610297565b6100bc6100b7366004610a51565b6103a6565b6040516100ca929190610ace565b60405180910390f35b6100fc6100e1366004610afc565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100ca565b610134610122366004610a51565b60026020526000908152604090205481565b6040519081526020016100ca565b61009f610150366004610a14565b61052e565b61009f610163366004610b15565b61062f565b61017b610176366004610afc565b610788565b6040516100ca93929190610b79565b336000908152600260205260409020546101a357600080fd5b33600090815260026020526040812054815481106101c3576101c3610bb9565b60009182526020909120600390910201546001600160a01b031633146101e857600080fd5b336000908152600260205260408120548154909183918390811061020e5761020e610bb9565b906000526020600020906003020160020190805190602001906102329291906108d8565b507f76571b7a897a1509c641587568218a290018fbdc8b9a724f17b77ff0eec22c0c81336000848154811061026957610269610bb9565b90600052602060002090600302016001018560405161028b9493929190610caa565b60405180910390a15050565b738d3e809fbd258083a5ba004a527159da535c8aba33146102b757600080fd5b604080516060810182526000808252825180840184526001808252600160fd1b60208084018290528086019384528651808801885283815280820192909252958501528254908101835591805282517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563600390930292830180546001600160a01b0319166001600160a01b039092169190911781559051805193949193610385937f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564019291909101906108d8565b50604082015180516103a19160028401916020909101906108d8565b505050565b6001600160a01b0381166000908152600260205260408120548154606092839291829081106103d7576103d7610bb9565b9060005260206000209060030201600101600082815481106103fb576103fb610bb9565b906000526020600020906003020160020181805461041890610bcf565b80601f016020809104026020016040519081016040528092919081815260200182805461044490610bcf565b80156104915780601f1061046657610100808354040283529160200191610491565b820191906000526020600020905b81548152906001019060200180831161047457829003601f168201915b505050505091508080546104a490610bcf565b80601f01602080910402602001604051908101604052809291908181526020018280546104d090610bcf565b801561051d5780601f106104f25761010080835404028352916020019161051d565b820191906000526020600020905b81548152906001019060200180831161050057829003601f168201915b505050505090509250925050915091565b3360009081526002602052604090205461054757600080fd5b336000908152600260205260408120548154811061056757610567610bb9565b60009182526020909120600390910201546001600160a01b0316331461058c57600080fd5b33600090815260026020526040812054815490918391839081106105b2576105b2610bb9565b906000526020600020906003020160010190805190602001906105d69291906108d8565b507f76571b7a897a1509c641587568218a290018fbdc8b9a724f17b77ff0eec22c0c8133846000858154811061060e5761060e610bb9565b906000526020600020906003020160020160405161028b9493929190610cf1565b336000908152600260205260409020541561064957600080fd5b6040805160608101825233815260208082018581529282018490526000805460018101825590805282517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563600390920291820180546001600160a01b0319166001600160a01b03909216919091178155935180519394936106f3937f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5649093019291909101906108d8565b506040820151805161070f9160028401916020909101906108d8565b5050600080543380835260026020908152604080852084905583855260019091529283902080546001600160a01b0319168217905591519092507f9ab3aefb2ba6dc12910ac1bce4692cf5c3c0d06cff16327c64a3ef78228b130b9161077b9184919087908790610d2d565b60405180910390a1505050565b6000818154811061079857600080fd5b6000918252602090912060039091020180546001820180546001600160a01b039092169350906107c790610bcf565b80601f01602080910402602001604051908101604052809291908181526020018280546107f390610bcf565b80156108405780601f1061081557610100808354040283529160200191610840565b820191906000526020600020905b81548152906001019060200180831161082357829003601f168201915b50505050509080600201805461085590610bcf565b80601f016020809104026020016040519081016040528092919081815260200182805461088190610bcf565b80156108ce5780601f106108a3576101008083540402835291602001916108ce565b820191906000526020600020905b8154815290600101906020018083116108b157829003601f168201915b5050505050905083565b8280546108e490610bcf565b90600052602060002090601f016020900481019282610906576000855561094c565b82601f1061091f57805160ff191683800117855561094c565b8280016001018555821561094c579182015b8281111561094c578251825591602001919060010190610931565b5061095892915061095c565b5090565b5b80821115610958576000815560010161095d565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261099857600080fd5b813567ffffffffffffffff808211156109b3576109b3610971565b604051601f8301601f19908116603f011681019082821181831017156109db576109db610971565b816040528381528660208588010111156109f457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610a2657600080fd5b813567ffffffffffffffff811115610a3d57600080fd5b610a4984828501610987565b949350505050565b600060208284031215610a6357600080fd5b81356001600160a01b0381168114610a7a57600080fd5b9392505050565b6000815180845260005b81811015610aa757602081850181015186830182015201610a8b565b81811115610ab9576000602083870101525b50601f01601f19169290920160200192915050565b604081526000610ae16040830185610a81565b8281036020840152610af38185610a81565b95945050505050565b600060208284031215610b0e57600080fd5b5035919050565b60008060408385031215610b2857600080fd5b823567ffffffffffffffff80821115610b4057600080fd5b610b4c86838701610987565b93506020850135915080821115610b6257600080fd5b50610b6f85828601610987565b9150509250929050565b6001600160a01b0384168152606060208201819052600090610b9d90830185610a81565b8281036040840152610baf8185610a81565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610be357607f821691505b60208210811415610c0457634e487b7160e01b600052602260045260246000fd5b50919050565b8054600090600181811c9080831680610c2457607f831692505b6020808410821415610c4657634e487b7160e01b600052602260045260246000fd5b83885260208801828015610c615760018114610c7257610c9d565b60ff19871682528282019750610c9d565b60008981526020902060005b87811015610c9757815484820152908601908401610c7e565b83019850505b5050505050505092915050565b8481526001600160a01b0384166020820152608060408201819052600090610cd490830185610c0a565b8281036060840152610ce68185610a81565b979650505050505050565b8481526001600160a01b0384166020820152608060408201819052600090610d1b90830185610a81565b8281036060840152610ce68185610c0a565b8481526001600160a01b0384166020820152608060408201819052600090610cd490830185610a8156fea2646970667358221220278aea6183868e9393abb9772657378075ff8d9ad6659cb8a1bc76c4569a5edd64736f6c634300080a0033";

type GravatarRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GravatarRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GravatarRegistry__factory extends ContractFactory {
  constructor(...args: GravatarRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GravatarRegistry> {
    return super.deploy(overrides || {}) as Promise<GravatarRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GravatarRegistry {
    return super.attach(address) as GravatarRegistry;
  }
  override connect(signer: Signer): GravatarRegistry__factory {
    return super.connect(signer) as GravatarRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GravatarRegistryInterface {
    return new utils.Interface(_abi) as GravatarRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GravatarRegistry {
    return new Contract(address, _abi, signerOrProvider) as GravatarRegistry;
  }
}
